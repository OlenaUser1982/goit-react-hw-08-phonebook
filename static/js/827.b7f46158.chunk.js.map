{"version":3,"file":"static/js/827.b7f46158.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const Form = styled.form`\n  max-width: 300px;\n  margin: 10px;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background: #f9f9f9;\n`;\nexport const Label = styled.label`\n  display: block;\n  margin: 10px 0;\n  font-size: 14px;\n`;\nexport const Input = styled.input`\n  width: 100%;\n  padding: 8px;\n  box-sizing: border-box;\n  font-size: 14px;\n`;\n\nexport const Button = styled.button`\n  padding: 10px 15px;\n  border: none;\n  border-radius: 6px;\n  font-size: 14px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContact = state => state.contacts.contacts.items;\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectVisibleContacts = createSelector(\n  [selectContact, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { Form, Label } from './ContactsForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContact } from '../../redux/contacts/selectors';\n\nimport { fetchAddNewContact } from '../../redux/contacts/operations';\n\nconst ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContact);\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!name.trim() || !number.trim()) return;\n    const isExist = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isExist) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(fetchAddNewContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        name\n        <input\n          name=\"name\"\n          type=\"text\"\n          required\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        />\n      </Label>\n      <Label>\n        number\n        <input\n          required\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        />\n      </Label>\n      <button type=\"submit\"> Add contact</button>\n    </Form>\n  );\n};\n\nexport default ContactsForm;\n","const ContactsListItem = ({ contact, onDelete }) => {\n  const handleDelete = () => {\n    onDelete(contact.id);\n  };\n\n  return (\n    <li key={contact.id}>\n      {contact.name}: {contact.number}{' '}\n      <button onClick={handleDelete}>Delete</button>\n    </li>\n  );\n};\n\nexport default ContactsListItem;\n","import ContactsListItem from 'components/ContactsListItem/ContactsListItem';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport { fetchDeleteContact } from '../../redux/contacts/operations';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n  const onDelete = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ContactsListItem\n          key={contact.id}\n          contact={contact}\n          onDelete={onDelete}\n        />\n      ))}\n    </ul>\n  );\n};\nexport default ContactsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <input\n      type=\"text\"\n      value={filter}\n      onChange={onChange}\n      placeholder=\"Find contacts by name:\"\n    />\n  );\n};\nexport default Filter;\n","import { useEffect } from 'react';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport ContactsList from 'components/ContactsList/ContactsList';\n\nimport Filter from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGetAllContacts } from '../../redux/contacts/operations';\nimport { selectContact, selectIsLoading } from '../../redux/contacts/selectors';\nimport { Loader } from 'components/Loader/Loader';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContact);\n  const isLoading = useSelector(selectIsLoading);\n  useEffect(() => {\n    dispatch(fetchGetAllContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      {isLoading && <Loader />}\n      <h1>Phonebook</h1>\n      <ContactsForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {contacts && <ContactsList />}\n    </div>\n  );\n};\nexport default ContactsPage;\n"],"names":["Form","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","_templateObject3","_templateObject4","selectContact","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","_jsxs","onSubmit","preventDefault","trim","some","alert","concat","fetchAddNewContact","children","_jsx","type","required","onChange","pattern","_ref","onDelete","onClick","id","fetchDeleteContact","map","ContactsListItem","setFilter","placeholder","useEffect","fetchGetAllContacts","Loader","ContactsForm","Filter","ContactsList"],"sourceRoot":""}